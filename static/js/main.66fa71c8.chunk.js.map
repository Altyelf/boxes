{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","inputValue","setInputValue","colors","setColors","hasColor","inputColor","some","item","color","type","placeholder","value","onChange","e","target","onClick","newColors","count","map","i","index","findIndex","splice","deleteColor","className","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOA4EeA,G,MApEH,WAAO,IAAD,EACoBC,mBAAS,IAD7B,mBACTC,EADS,KACGC,EADH,OAEYF,mBAAkB,IAF9B,mBAETG,EAFS,KAEDC,EAFC,KAuBVC,EAAW,SAACC,GAChB,OAAOH,EAAOI,MAAK,SAACC,GAAD,OAAUA,EAAKC,QAAUH,MAW9C,OACE,gCACE,uBACEI,KAAK,OACLC,YAAY,YACZC,MAAOX,EACPY,SACE,SAACC,GACCZ,EAAcY,EAAEC,OAAOH,UAK7B,wBAAQI,QA5CU,WACpB,IAAMC,EAAS,YAAOd,IACO,IAAzBE,EAASJ,GACXG,EAAU,GAAD,mBAAKD,GAAL,CAAa,CAAEe,MAAO,EAAGT,MAAOR,OAGzCgB,EAAUE,KAAI,SAACX,GACb,OAAIA,EAAKC,QAAUR,EACV,2BAAKO,GAAZ,IAAkBU,MAAOV,EAAKU,UAEvBV,KAGXJ,EAAUa,IAGZf,EAAc,KA4BZ,iBAICC,EAAOgB,KAAI,SAACV,EAAOW,GAClB,OACE,qBACAJ,QAAS,kBA5BG,SAACP,GACnB,IAAMQ,EAAS,YAAOd,GAChBkB,EAAQJ,EAAUK,WAAU,SAAAd,GAAI,OAAIA,EAAKC,QAAUA,KACzDQ,EAAUM,OAAOF,EAAO,GACxBjB,EAAUa,GAwBWO,CAAYf,EAAMA,QAC/BgB,UAAU,MAEVC,MAAO,CACLC,gBAAiBlB,EAAMA,OAL3B,SAOGA,EAAMS,OAJFE,WCnDFQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.66fa71c8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\ntype Color = {\n  count: number;\n  color: string;\n}\n\nconst App = () => {\n  const [inputValue, setInputValue] = useState('')\n  const [colors, setColors] = useState<Color[]>([])\n\n  const submitHandler = () => {\n    const newColors = [...colors]\n    if (hasColor(inputValue) === false) {\n      setColors([...colors, { count: 1, color: inputValue }])\n    }\n    else {\n      newColors.map((item) => {\n        if (item.color === inputValue) {\n          return { ...item, count: item.count++ }\n        } else {\n          return item\n        }\n      })\n      setColors(newColors)\n    }\n\n    setInputValue('')\n  }\n\n  const hasColor = (inputColor: string) => {\n    return colors.some((item) => item.color === inputColor)\n  }\n\n  const deleteColor = (color: string) => {\n    const newColors = [...colors]\n    const index = newColors.findIndex(item => item.color === color)\n    newColors.splice(index, 1)\n    setColors(newColors)\n  }\n  \n\n  return (\n    <div>\n      <input\n        type='text'\n        placeholder=\"add color\"\n        value={inputValue}\n        onChange={\n          (e) => {\n            setInputValue(e.target.value)\n          }\n        }\n      />\n\n      <button onClick={submitHandler}>\n        Add\n      </button>\n\n      {colors.map((color, i) => {\n        return (\n          <div\n          onClick={() => deleteColor(color.color)}\n            className='box'\n            key={i}\n            style={{\n              backgroundColor: color.color\n            }}>\n            {color.count}\n          </div>)\n      })}\n    </div>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}